{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction \u00b6 You can learn from this guide how to use OAuth via a Google server to: connect to Settle accept connections from Settle We are using Google Cloud Platform (GCP) service accounts and authorization servers to secure endpoints in our APIs. We propose that you use the same principles to secure endpoints in your APIs. After reading the docs for how to connect, consider taking a look at the Python demo for the entire flow . The OAuth flow \u00b6 This is a generic diagram that applies in both directions, i.e. for both connecting to settle and for accepting connections from Settle. Please refer back to this for clarity on terminology and discrete steps if any confusion arises while reading the other docs. sequenceDiagram participant C as Client Service participant G as GCP Auth Server participant S as API Server C ->>+ G: SvcAcctKey, Audience Note right of C: Audience = Server endpoint URL G ->> G: Verifies SvcAcctEmail<br>with Client Key G ->>- C: Token C ->>+ S: Token S ->>+ G: Token G ->> G: Verifies Token signature G ->>- S: Verification result S ->> S: Verifies SvcAcctEmail<br>and Audience S ->>- C: Data","title":"Home"},{"location":"index.html#introduction","text":"You can learn from this guide how to use OAuth via a Google server to: connect to Settle accept connections from Settle We are using Google Cloud Platform (GCP) service accounts and authorization servers to secure endpoints in our APIs. We propose that you use the same principles to secure endpoints in your APIs. After reading the docs for how to connect, consider taking a look at the Python demo for the entire flow .","title":"Introduction"},{"location":"index.html#the-oauth-flow","text":"This is a generic diagram that applies in both directions, i.e. for both connecting to settle and for accepting connections from Settle. Please refer back to this for clarity on terminology and discrete steps if any confusion arises while reading the other docs. sequenceDiagram participant C as Client Service participant G as GCP Auth Server participant S as API Server C ->>+ G: SvcAcctKey, Audience Note right of C: Audience = Server endpoint URL G ->> G: Verifies SvcAcctEmail<br>with Client Key G ->>- C: Token C ->>+ S: Token S ->>+ G: Token G ->> G: Verifies Token signature G ->>- S: Verification result S ->> S: Verifies SvcAcctEmail<br>and Audience S ->>- C: Data","title":"The OAuth flow"},{"location":"Accepting_connections_from_Settle.html","text":"Important Your API must be exposed the internet. Settle no longer uses VPN for securing communication for new integrations. In this scenario, the Client Service is a Settle service and the API Server is your API server. Settle will provide you with one service account email for each Settle service that needs to access your server. You must register the email in your system. Typically, there will be a single Settle service that will need to be registered. When connecting to your API server, Settle will transmit the token as part of the request headers in the Authorization: Bearer <TOKEN> form. You will use a GCP Auth Server to verify the token included in the request is valid. Then you will verify that the decoded token contents contain the Settle service account email and the endpoint URL as the audience . To perform the verifications you need to implement code in your API server. This effort should be minimal if you use the appropriate Google client library. We have included links for several languages in the Reference section. Sample server implementation in Python \u00b6 Todo Description from typing import Optional import google.oauth2.id_token import google.auth.transport.requests # The service account email is generated by Google Cloud # using the project id and the service account name: # SA_EMAIL = f\"{SA_NAME}@{PROJECT_ID}.iam.gserviceaccount.com\" # For example: # PROJECT_ID = \"microcorp-project42-sandbox\" # SA_NAME = \"external-auth\" # SA_EMAIL = \"external-auth@microcorp-project42-sandbox.iam.gserviceaccount.com\" # # If you're using Google Cloud, you can use the service account attached # to the service that is sending the request. def verify_id_token ( token : str , sa_email : str , audience : Optional [ str ] = None ) -> bool : request = google . auth . transport . requests . Request () try : id_info = google . oauth2 . id_token . verify_oauth2_token ( token , request , audience = audience ) except ValueError : print ( \"Unable to verify token.\" ) return False print ( \"Token in decoded form, verified with aud:\" , id_info , sep = \" \\n \" ) return id_info [ \"email\" ] == sa_email","title":"Accepting connections from Settle"},{"location":"Accepting_connections_from_Settle.html#sample-server-implementation-in-python","text":"Todo Description from typing import Optional import google.oauth2.id_token import google.auth.transport.requests # The service account email is generated by Google Cloud # using the project id and the service account name: # SA_EMAIL = f\"{SA_NAME}@{PROJECT_ID}.iam.gserviceaccount.com\" # For example: # PROJECT_ID = \"microcorp-project42-sandbox\" # SA_NAME = \"external-auth\" # SA_EMAIL = \"external-auth@microcorp-project42-sandbox.iam.gserviceaccount.com\" # # If you're using Google Cloud, you can use the service account attached # to the service that is sending the request. def verify_id_token ( token : str , sa_email : str , audience : Optional [ str ] = None ) -> bool : request = google . auth . transport . requests . Request () try : id_info = google . oauth2 . id_token . verify_oauth2_token ( token , request , audience = audience ) except ValueError : print ( \"Unable to verify token.\" ) return False print ( \"Token in decoded form, verified with aud:\" , id_info , sep = \" \\n \" ) return id_info [ \"email\" ] == sa_email","title":"Sample server implementation in Python"},{"location":"Connecting_to_Settle.html","text":"In this scenario, the Client Service is your service and the API Server is the Settle API server. To access a Settle endpoint, your service needs a service account key and an audience , which is the URL of the Settle API server endpoint. After creating a service account in GCP, you can obtain an associated service account key in GCP. You must supply your service account email to Settle before you can use its associated service account key to access the Settle API Server. We will register it in our system and inform you when it becomes active. When connecting to the Settle API server, you will transmit the token as part of the request headers in the Authorization: Bearer <TOKEN> form. Creating a GCP service account and key \u00b6 To connect to Settle, you\u2019ll need a GCP service account. After creating the service account, you\u2019ll need to create a key to use it in your API. Important The key will only be provided at creation time, so make sure to save it then. Settle provides access to two environments: production and sandbox . You will thus need to create two service accounts, one for each environment. While you could have both service accounts in a single GCP project: projects : - global : users : [ admins@example.com ] service_accounts : [ example-service-prod , example-service-demo ] we recommend you create one project with one service account for each environment: projects : - production : users : [ admins@example.com ] service_accounts : [ example-service ] - sandbox : users : [ admins@example.com , devs@example.com ] service_accounts : [ example-service ] The recommended approach will allow you to provide easy sandbox access to devs while keeping the production side admin-only. Warning When generating the key for the productions service account, you are responsible to secure it, as it will provide access to Settle production APIs. See the GCP docs for service accounts here . To create a project, a service account and its key, use the script below in Linux or the GCP console . # project names are unique across GCP, must be between 6 and 30 characters, # and may contain only digits, lowercase letters and dashes # a typical pattern is {COMPANY}-{PROJECT}-{ENVIRONMENT} # e.g. microcorp-project42-sandbox read PROJECT_ID SA_NAME = \"test-service\" gcloud projects create \" ${ PROJECT_ID } \" gcloud iam service-accounts create \" ${ SA_NAME } \" --project \" ${ PROJECT_ID } \" # generate service account credentials locally PATH_TO_SA_PRIVATE_KEY = \"./sa-private-key.json\" SA_EMAIL = \" ${ SA_NAME } @ ${ PROJECT_ID } .iam.gserviceaccount.com\" gcloud iam service-accounts keys create \" ${ PATH_TO_SA_PRIVATE_KEY } \" \\ --iam-account = \" ${ SA_EMAIL } \" You may also use the GCP console graphical interface. Todo Create point and click guide for graphical interface. Connecting \u00b6 Sample client implementation in Python \u00b6 Todo Description import google.auth.transport.requests import google.oauth2.service_account def get_id_token_from_service_account ( svc_account_file : str , target_audience : str ): \"\"\"Returns a token obtained from the Google auth server based on a locally generated service account credentials json file. \"\"\" id_token_credentials = ( google . oauth2 . service_account . IDTokenCredentials . from_service_account_file ( svc_account_file , target_audience = target_audience ) ) request = google . auth . transport . requests . Request () id_token_credentials . refresh ( request ) return id_token_credentials . token","title":"Connecting to Settle"},{"location":"Connecting_to_Settle.html#creating-a-gcp-service-account-and-key","text":"To connect to Settle, you\u2019ll need a GCP service account. After creating the service account, you\u2019ll need to create a key to use it in your API. Important The key will only be provided at creation time, so make sure to save it then. Settle provides access to two environments: production and sandbox . You will thus need to create two service accounts, one for each environment. While you could have both service accounts in a single GCP project: projects : - global : users : [ admins@example.com ] service_accounts : [ example-service-prod , example-service-demo ] we recommend you create one project with one service account for each environment: projects : - production : users : [ admins@example.com ] service_accounts : [ example-service ] - sandbox : users : [ admins@example.com , devs@example.com ] service_accounts : [ example-service ] The recommended approach will allow you to provide easy sandbox access to devs while keeping the production side admin-only. Warning When generating the key for the productions service account, you are responsible to secure it, as it will provide access to Settle production APIs. See the GCP docs for service accounts here . To create a project, a service account and its key, use the script below in Linux or the GCP console . # project names are unique across GCP, must be between 6 and 30 characters, # and may contain only digits, lowercase letters and dashes # a typical pattern is {COMPANY}-{PROJECT}-{ENVIRONMENT} # e.g. microcorp-project42-sandbox read PROJECT_ID SA_NAME = \"test-service\" gcloud projects create \" ${ PROJECT_ID } \" gcloud iam service-accounts create \" ${ SA_NAME } \" --project \" ${ PROJECT_ID } \" # generate service account credentials locally PATH_TO_SA_PRIVATE_KEY = \"./sa-private-key.json\" SA_EMAIL = \" ${ SA_NAME } @ ${ PROJECT_ID } .iam.gserviceaccount.com\" gcloud iam service-accounts keys create \" ${ PATH_TO_SA_PRIVATE_KEY } \" \\ --iam-account = \" ${ SA_EMAIL } \" You may also use the GCP console graphical interface. Todo Create point and click guide for graphical interface.","title":"Creating a GCP service account and key"},{"location":"Connecting_to_Settle.html#connecting","text":"","title":"Connecting"},{"location":"Connecting_to_Settle.html#sample-client-implementation-in-python","text":"Todo Description import google.auth.transport.requests import google.oauth2.service_account def get_id_token_from_service_account ( svc_account_file : str , target_audience : str ): \"\"\"Returns a token obtained from the Google auth server based on a locally generated service account credentials json file. \"\"\" id_token_credentials = ( google . oauth2 . service_account . IDTokenCredentials . from_service_account_file ( svc_account_file , target_audience = target_audience ) ) request = google . auth . transport . requests . Request () id_token_credentials . refresh ( request ) return id_token_credentials . token","title":"Sample client implementation in Python"},{"location":"python_demo.html","text":"The demo will attempt to follow through the OAuth flow by: getting a token on the client side from the GCP auth server using a GCP service account verifying and decoding the token on the server side For this you need a service account in GCP and an associated .json key file downloaded as sa-private-key.json in the root directory of the repo. # set up python virtual environment PYTHON_VERSION = \"3.9.1\" VENV_NAME = \"svc-auth-391\" pyenv virtualenv \" ${ PYTHON_VERSION } \" \" ${ VENV_NAME } \" pyenv local \" ${ VENV_NAME } \" poetry install # run example python samples/python/main.py","title":"Python demo"},{"location":"reference.html","text":"Client libraries \u00b6 Python: https://github.com/googleapis/google-auth-library-python Go: https://github.com/golang/oauth2 Java: https://github.com/googleapis/google-auth-library-java .NET: https://github.com/googleapis/google-api-dotnet-client Node.js https://github.com/googleapis/google-auth-library-nodejs PHP: https://github.com/googleapis/google-auth-library-php Ruby: https://github.com/googleapis/google-auth-library-ruby Warning Make sure you do NOT use this deprecated Python client: https://github.com/googleapis/oauth2client","title":"Reference"},{"location":"reference.html#client-libraries","text":"Python: https://github.com/googleapis/google-auth-library-python Go: https://github.com/golang/oauth2 Java: https://github.com/googleapis/google-auth-library-java .NET: https://github.com/googleapis/google-api-dotnet-client Node.js https://github.com/googleapis/google-auth-library-nodejs PHP: https://github.com/googleapis/google-auth-library-php Ruby: https://github.com/googleapis/google-auth-library-ruby Warning Make sure you do NOT use this deprecated Python client: https://github.com/googleapis/oauth2client","title":"Client libraries"}]}